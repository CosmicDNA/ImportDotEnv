name: Release
env:
  PSGALLERY_API_KEY: ${{ secrets.POWER_SHELL_GALLERY_API_KEY }}
  TAG_TYPE: 'stable'
  BUILD_VERSION: '0.0.0'
  BUILD_NUMBER: 0
  COVERAGE: 0
on:
  push:
    tags:
      - 'v*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  test:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Pester
        run: |
          Install-Module -Name Pester -Force -Scope CurrentUser

      - name: Run Pester tests
        run: |
          # Run Pester tests with coverage
          $COVERAGE = & .\scripts\RunTests.ps1 -EnableCoverage
          # Update env var with the coverage information
          echo "COVERAGE=$COVERAGE" >> $env:GITHUB_ENV

      - name: Determine Tag Type and update TAG_TYPE
        id: tag_type
        run: |
          if ("${{ github.ref_name }}" -match 'v(\d+\.\d+\.\d+)(-(beta|alpha|rc)(\.(\d+))?)?') {
            $BUILD_VERSION = $matches[1]
            Write-Output "BUILD_VERSION=$BUILD_VERSION" >> $env:GITHUB_ENV
            if ($matches[3]) {
              $TAG_TYPE = $matches[3]
              Write-Output "TAG_TYPE=$TAG_TYPE" >> $env:GITHUB_ENV
              if ($matches[5]) {
                $BUILD_NUMBER = $matches[5]
                Write-Output "BUILD_NUMBER=$BUILD_NUMBER" >> $env:GITHUB_ENV
              }
            }
          }

      - name: Increment Version (Beta, Alpha, RC)
        if: env.TAG_TYPE != 'stable'
        run: |
          $moduleManifestPath = ".\ImportDotEnv.psd1"
          $moduleManifest = Import-PowerShellDataFile -Path $moduleManifestPath
          $currentVersion = [version]$moduleManifest.ModuleVersion
          $buildNumber = "${{ env.BUILD_NUMBER }}"
          switch ("${{ env.TAG_TYPE }}") {
            'beta' { $newVersion = "{0}.{1}.{2}-beta.{3}" -f $currentVersion.Major, $currentVersion.Minor, $currentVersion.Build, $buildNumber }
            'alpha' { $newVersion = "{0}.{1}.{2}-alpha.{3}" -f $currentVersion.Major, $currentVersion.Minor, $currentVersion.Build, $buildNumber }
            'rc' { $newVersion = "{0}.{1}.{2}-rc.{3}" -f $currentVersion.Major, $currentVersion.Minor, $currentVersion.Build, $buildNumber }
          }
          $moduleManifest.ModuleVersion = $newVersion
          $moduleManifest | Export-CliXml -Path $moduleManifestPath
          Write-Host "Updated module version to $newVersion"

      - name: Publish and Save Module
        if: env.TAG_TYPE == 'stable'
        run: |
          pwsh -Command "`$apiKey = `$env:PSGALLERY_API_KEY; Publish-Module -Path . -NuGetApiKey `$apiKey"

      - name: Create GitHub Release
        id: create_release
        if: env.TAG_TYPE == 'stable'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: "Check out the latest features and fixes! Coverage: ${{ env.COVERAGE }}%"
          draft: true

      - name: Download Nupkg
        if: env.TAG_TYPE == 'stable'
        run: |
          # Define the module name
          $moduleName = "ImportDotEnv"

          # Find the latest version
          $latestVersion = "${{ env.BUILD_VERSION }}"

          # Define the URL for the .nupkg file
          $url = "https://www.powershellgallery.com/api/v2/package/$moduleName/$latestVersion"

          # Define the output path
          $outputPath = "${{ runner.temp }}/$moduleName.$latestVersion.nupkg"

          # Download the .nupkg file using certutil.exe
          certutil.exe -urlcache -split -f $url $outputPath

          Write-Output "Downloaded $moduleName version $latestVersion to $outputPath"

      - name: Upload Release Asset
        id: upload-release-asset
        if: env.TAG_TYPE == 'stable'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ runner.temp }}/ImportDotEnv.${{ env.BUILD_VERSION }}.nupkg
          asset_name: ImportDotEnv.${{ env.BUILD_VERSION }}.nupkg
          asset_content_type: application/zip

      - name: Setup .NET 9
        if: env.TAG_TYPE == 'stable'
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '9.0.x'

      - name: Install ReportGenerator
        if: env.TAG_TYPE == 'stable'
        run: |
          $userTempFolder = [System.IO.Path]::GetTempPath()
          $guid = [guid]::NewGuid()
          $userTempDir="$userTempFolder$guid"
          certutil.exe -urlcache -split -f "https://github.com/danielpalme/ReportGenerator/releases/download/v5.4.4/ReportGenerator_5.4.4.zip" "${userTempDir}RG.zip"
          Expand-Archive "${userTempDir}RG.zip" -DestinationPath "${userTempDir}reportgenerator"
          Copy-Item -Path "${userTempDir}reportgenerator\net9.0" -Destination reportgenerator -Recurse

      - name: Generate code coverage report
        if: env.TAG_TYPE == 'stable'
        run: |
          ./reportgenerator/ReportGenerator.exe -reports:coverage.xml -targetdir:reports -reporttypes:'Latex;Html' -sourcedirs:.

      - name: Save coverage to JSON file
        if: env.TAG_TYPE == 'stable'
        run: |
          $json = @{"schemaVersion"=1; "label"="coverage"; "message"="${{ env.COVERAGE }}%"; "color"="green"} | ConvertTo-Json
          $json | Out-File -FilePath reports/coverage.json -Encoding utf8

      - name: Setup Pages
        if: env.TAG_TYPE == 'stable'
        uses: actions/configure-pages@v5
      - name: Upload artifact
        if: env.TAG_TYPE == 'stable'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './reports'
      - name: Deploy to GitHub Pages
        if: env.TAG_TYPE == 'stable'
        id: deployment
        uses: actions/deploy-pages@v4
