name: Release
env:
  PSGALLERY_API_KEY: ${{ secrets.POWER_SHELL_GALLERY_API_KEY }}
on:
  push:
    tags:
      - 'v*'
jobs:
  test:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Pester
        run: |
          Install-Module -Name Pester -Force -Scope CurrentUser

      - name: Run Pester tests
        run: |
          # Run Pester tests with coverage
          $COVERAGE = & .\scripts\RunTests.ps1 -EnableCoverage
          # Update env var with the coverage information
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

      - name: Publish and Save Module
        run: |
          pwsh -Command "`$apiKey = `$env:PSGALLERY_API_KEY; Publish-Module -Path . -NuGetApiKey `$apiKey"
          New-Item -ItemType Directory -Path .\output
          Save-Module -Name ImportDotEnv -Path .\output

      - name: Determine Package Filename
        id: pkgname
        run: |
          $pkg = Get-ChildItem -Path .\output\*.nupkg | Select-Object -First 1
          echo "PKG_NAME=$($pkg.Name)" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: "Check out the latest features and fixes! Coverage: ${{ env.COVERAGE }}%"
          draft: true

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/${{ env.PKG_NAME }}
          asset_name: ${{ env.PKG_NAME }}
          asset_content_type: application/zip

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '9.0.x'

      - name: Install ReportGenerator
        run: |
          $userTempFolder = [System.IO.Path]::GetTempPath()
          $guid = [guid]::NewGuid()
          $userTempDir="$userTempFolder$guid"
          certutil.exe -urlcache -split -f "https://github.com/danielpalme/ReportGenerator/releases/download/v5.4.4/ReportGenerator_5.4.4.zip" "${userTempDir}RG.zip"
          Expand-Archive "${userTempDir}RG.zip" -DestinationPath "${userTempDir}reportgenerator"
          Copy-Item -Path "${userTempDir}reportgenerator\net9.0" -Destination reportgenerator -Recurse

      - name: Generate code coverage report
        run: |
          ./reportgenerator/ReportGenerator.exe -reports:coverage.xml -targetdir:reports -reporttypes:'Latex;Html' -sourcedirs:.

      - name: Save coverage to JSON file
        run: |
          $json = @{"schemaVersion"=1; "label"="coverage"; "message"="$COVERAGE%"; "color"="green"} | ConvertTo-Json
          $json | Out-File -FilePath reports/coverage.json -Encoding utf8

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports